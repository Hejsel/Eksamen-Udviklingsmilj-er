{
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig to read more about this file */

		/* Projekter */
		// "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
		// "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
		// "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
		// "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
		// "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
		// "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

		/* Sprog og milj√∏ */
		"target": "ES6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		// "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
		// "jsx": "preserve",                                /* Specify what JSX code is generated. */
		// "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
		// "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
		// "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
		// "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
		// "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
		// "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
		// "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
		// "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
		// "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

		/* Moduler */
		"module": "ESNext" /* Specify what module code is generated. */,
		// "rootDir": "./src/ts",                             /* Specify the root folder within your source files. */
		// "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
		// "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
		// "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
		// "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
		// "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
		// "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
		// "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
		// "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
		// "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
		// "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
		// "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
		// "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
		// "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
		// "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
		// "resolveJsonModule": true,                        /* Enable importing .json files. */
		// "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
		// "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

		/* JavaScript Support */
		// "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
		// "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
		// "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

		/* Udsendelse */
		// "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
		// "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
		// "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
		// "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
		// "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
		// "noEmit": true,                                   /* Disable emitting files from a compilation. */
		// "outFile": "undefined",                            /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
		// "outDir": "./dist",                                /* Specify an output folder for all emitted files. */
		// "removeComments": true,                           /* Disable emitting comments. */
		// "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
		// "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
		// "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
		// "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
		// "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
		// "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
		// "newLine": "crlf",                                /* Set the newline character for emitting files. */
		// "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
		// "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
		// "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
		// "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
		// "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

		/* Interop Constraints */
		// "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
		// "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
		// "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
		// "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		// "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */
		// "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
		// "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
		// "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
		// "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
		// "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
		// "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
		// "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
		// "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
		// "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
		// "noImplicitReturns": true,                        /* Enable error reporting when not all code paths in a function return a value. */
		// "noUnusedLocals": true,                           /* Enable error reporting for unused locals. */
		// "noUnusedParameters": true,                       /* Enable error reporting for unused parameters. */
		// "exactOptionalPropertyTypes": true,              /* Create exact types for optional properties. */

		/* Kotlin */
		// "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */

		/* Debugging */
		// "skipLibCheck": true,                             /* Skip type checking of declaration files. */
		// "skipDiagnostics": true,                          /* Skip performing type checking diagnostics. */
		// "disableSizeLimit": true,                         /* Disable compiler size checks. */
		// "forceConsistentCasingInFileNames": true,         /* Enable error reporting for incorrect casing in file names. */
		// "disableReferencedProjectLoad": true,             /* Disable loading references to projects by name instead of location. */
		// "disableSolutionSearching": true,                 /* Disable automatic searching for solutions. */
		// "disableResolutionAgnosticId": true,              /* Disable resolution of imports/exports using id without extensions. */
		// "disableModuleResolutionModuleField": true,       /* Disable resolution of module import/exports using the `module` field in package.json. */
		// "disableResolutionAgnosticId": true,              /* Disable resolution of imports/exports using id without extensions. */
		// "noResolveJsonModule": true,                      /* Disallow resolution of .json files as modules. */
		// "skipNodeModulesForModuleResolution": true,      /* Skip resolution of modules from node_modules when looking for imports. */
		// "disableNpmClientInstall": true,                  /* Disable npm client installation from within TypeScript. */
		// "disableLoadingFileReferencing": true,            /* Disable loading referenced files based on file name instead of location. */
		// "disableDefinition": true,                        /* Disable generating definition files. */
		// "disableImportValidation": true,                  /* Disable import validation from d.ts to TypeScript source files. */
		// "disableCheckFileDependencies": true,             /* Disable checking file dependencies based on import/export statements. */
		// "disableImportCompat": true,                      /* Disable type compatibility check on imports. */
		// "disableTemplateLiteralTypeCheck": true,          /* Disable type-checking of template literals. */
		// "disableFileExtensions": true,                    /* Disable file extension checks for imports. */
		// "disableSimplifyPath": true,                      /* Disable path simplification for imports. */
		// "disablePreserveDeclarationDirectories": true,   /* Disable preserving directories with declaration files. */
		// "disableReadonlyReferenceFromJS": true,          /* Disable error reporting for read-only references from JavaScript files. */
		// "disableArbitraryExtensionImports": true,        /* Disable importing files with arbitrary extensions. */

		/* Other Options */
		// "forceConsistentCasingInFileNames": true,         /* Ensure that casing is correct in imports. */
		// "noLib": true,                                     /* Disable including any library files, including the default lib.d.ts. */
		// "skipLibCheck": true,                              /* Skip type checking of declaration files. */
		// "noUnusedLocals": true,                            /* Enable error reporting for unused locals. */
		// "noUnusedParameters": true,                        /* Enable error reporting for unused parameters. */
		// "noImplicitAny": true,                             /* Enable error reporting for expressions and declarations with an implied 'any' type. */
		// "strict": true,                                    /* Enable all strict type-checking options. */
		// "jsx": "react",                                    /* Specify what JSX code is generated. */
		// "useDefineForClassFields": true,                   /* Emit ECMAScript-standard-compliant class fields. */
		// "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
		// "allowJs": true,                                   /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
		// "noImplicitThis": true,                            /* Enable error reporting when 'this' is given the type 'any'. */
		// "alwaysStrict": true,                              /* Ensure 'use strict' is always emitted. */
		// "sourceMap": true,                                 /* Create source map files for emitted JavaScript files. */
		// "inlineSourceMap": true,                           /* Include sourcemap files inside the emitted JavaScript. */
		// "noEmit": true,                                    /* Disable emitting files from a compilation. */
		// "preserveConstEnums": true,                        /* Disable erasing 'const enum' declarations in generated code. */
		// "noEmitHelpers": true,                             /* Disable generating custom helper functions like '__extends' in compiled output. */
		// "skipDiagnostics": true,                           /* Skip performing type checking diagnostics. */
		// "stripInternal": true,                             /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
		// "disableResolutionAgnosticId": true,               /* Disable resolution of imports/exports using id without extensions. */
		// "disableCheckFileDependencies": true,              /* Disable checking file dependencies based on import/export statements. */
		// "disableImportCompat": true,                       /* Disable type compatibility check on imports. */
		// "disableTemplateLiteralTypeCheck": true,           /* Disable type-checking of template literals. */
		// "disableFileExtensions": true,                     /* Disable file extension checks for imports. */
		// "disableSimplifyPath": true,                       /* Disable path simplification for imports. */
		// "disablePreserveDeclarationDirectories": true,    /* Disable preserving directories with declaration files. */
		// "disableReadonlyReferenceFromJS": true,           /* Disable error reporting for read-only references from JavaScript files. */
		// "disableArbitraryExtensionImports": true           /* Disable importing files with arbitrary extensions. */
	},
	"include": ["src/**/*"],
	"exclude": ["node_modules"]
}
